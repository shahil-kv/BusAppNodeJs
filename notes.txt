///main thing
     working of the application

+-------------------------+      +------------------------+      +----------------------+      +-----------------------+      +------------------------+
|  Client Sends Request   | ---> |  Node.js HTTP Server   | ---> | Express Application (`app`) | ---> | Middleware Pipeline   | ---> |    Route Matching     |
| (e.g., GET /api/v1/users)|      | (Listens on Port 8080) |      |                       |      | (Global `app.use()`s) |      |                       |
+-------------------------+      +------------------------+      +----------------------+      +-----------------------+      +------------------------+
                                                                                                    | Cors Check             |      | Does path match       |
                                                                                                    | Request IP             |      | /api/v1/users? YES!   |
                                                                                                    | Rate Limiter           |      +----------+------------+
                                                                                                    | Body Parsers           |                 |
                                                                                                    | Static Files Check     |                 v
                                                                                                    | Cookie Parser          |      +----------+------------+
                                                                                                    | Morgan (Request Log)   |      | `userRouter` Handles  |
                                                                                                    +------------------------+      |                       |
                                                                                                                                    +----------+------------+
                                                                                                                                               |
                               +------------------------+      +---------------------------+      +---------------------------+                 v
                               | Client Receives        | <--- | Express Sends Response    | <--- | Controller Function Runs  | <------ Optional Router    |
                               | Response (JSON/HTML)   |      | (via `res.json`, etc.)    |      | (e.g., `loginBusOwner`)   |         Middleware (Auth?) |
                               +------------------------+      +----------+----------------+      +------------+--------------+      +--------------------+
                                                                          ^                           |           |
                                                                          |                           | Success?  | Error?
                                                                          |                           v           v
+---------------------------------------------+                     +-----+-----+      +--------------+-------------+
| Morgan Logs Response (Status Code, Time)    | <------------------ | Send JSON |      | Error thrown or `next(err)`|
+---------------------------------------------+                     +-----------+      +--------------+-------------+
                                                                                                        |
                                                                                     Express Skips Regular Middleware
                                                                                                        |
                                                                                                        v
                                                                                       +----------------+-------------+
                                                                                       | Finds `errorHandler`        |
                                                                                       | (Correct 4-arg signature)   |
                                                                                       +----------------+-------------+
                                                                                                        |
                               +------------------------+                                               v
                               | Winston Logs Error     | <---------------------------+   +------------+-------------+
                               | (to console/error.log) |                               |   | `errorHandler` Runs       |
                               +------------------------+                               +-- | Formats JSON Error Resp.  |
                                                                                           +---------------------------+


// MAIN THING
🚀 Node.js App Startup & Logging Flow — Explained
🟢 App Startup Process (npm start)
Startup (npm start)

Executes node your-main-file.js (e.g., index.js or app.ts).

All require / import statements are loaded.

dotenv.config() loads environment variables from .env.

App Initialization

express() creates the main app object.

All app.use(...) calls register middleware (they don’t run yet).

app.use('/api/v1/users', userRouter) → Registers the route handler.

Swagger UI Setup

Optional: Sets up API documentation.

Error Handler Registration

app.use(errorHandler) → Registers a global error handler at the end.

Server Starts

httpServer.listen(port, ...) → App starts listening for requests (e.g., http://localhost:4100).

📥 Request Flow (e.g., POST /api/v1/users/login)
Raw Request Arrival

Node's HTTP server receives the request and passes it to Express (app).

Global Middleware Pipeline (in order of registration)

cors: Validates allowed origins.

request-ip: Adds req.clientIp.

limiter: Rate limits requests.

express.json(): Parses JSON bodies into req.body.

express.urlencoded(): Parses form submissions into req.body.

express.static: Serves static files if path matches (request ends here if matched).

cookieParser: Parses Cookie headers into req.cookies.

morganMiddleware: Logs request details using Morgan (e.g., POST /api/v1/users/login 200 55ms).

Routing

Express matches path (e.g., /api/v1/users) → sends it to userRouter.

Router Execution (user.routes.ts)

Route is matched (e.g., router.post('/login', loginBusOwner)).

Any route-specific middleware (e.g., checkAuth) is run.

Controller Logic (loginBusOwner)

Core business logic executes:

Validates input.

Queries DB.

Compares passwords, etc.

✅ Scenario A: Login Success
res.status(200).json(new ApiResponse(200, data, "Login successful"))

Response is sent to client.

morganMiddleware logs success (e.g., 200 OK 55ms).

❌ Scenario B: Login Error
throw new ApiError(401, "Invalid credentials.")

asyncHandler catches error → calls next(error)

Express skips remaining routes/middleware → Finds error handler.

🔥 errorHandler (Global Error Middleware)
Receives error (e.g., instance of ApiError)

Logs to Winston: logger.error("Invalid credentials.")

Sends JSON response: res.status(401).json(...)

🧾 Logging Overview
📋 Morgan: HTTP Request Logger
Purpose: Auto-logs all incoming/outgoing HTTP traffic.

Example Log: POST /api/v1/users/login 200 55ms

Configuration:

ts
Copy
Edit
morgan('combined', {
  stream: {
    write: (message) => logger.http(message.trim())
  }
});
Registered via: app.use(morganMiddleware)

🛠 Winston: General-Purpose Logger
Purpose: Manual logging of application events, errors, debugging info.

Used In: Controllers, services, errorHandler

Transports:

Console

logs/error.log → logger.error(...)

logs/info.log → logger.info(...)

logs/http.log → logger.http(...) (used by Morgan)

Winston receives logs from both app code and Morgan.

🧼 Log Rotation (Avoid Disk Issues)
Use Winston’s built-in maxsize and maxFiles for cleanup:

ts
Copy
Edit
new winston.transports.File({
  filename: "logs/info.log",
  level: "info",
  maxsize: 10 * 1024 * 1024, // 10MB
  maxFiles: 3
})
Or use winston-daily-rotate-file for daily rotation (optional).

💡 Summary
Tool	Role	Where Used
Morgan	HTTP traffic logs	Middleware (morganMiddleware)
Winston	Manual logs & error tracking	App logic & errorHandler
Express	Handles routing & middleware	app.ts, user.routes.ts