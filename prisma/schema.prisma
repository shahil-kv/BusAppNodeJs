generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                Int              @id @default(autoincrement())
  phone_number      String           @unique @db.VarChar(15)
  password_hash     String           @db.VarChar(255)
  full_name         String           @db.VarChar(255)
  email             String?          @unique @db.VarChar(255)
  is_phone_verified Boolean?         @default(false)
  is_premium        Boolean?         @default(false)
  premium_expiry    DateTime?        @db.Timestamptz(6)
  role              String?          @default("USER") @db.VarChar(20)
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?        @default(now()) @db.Timestamptz(6)
  refresh_tokens    refresh_tokens[]

  @@index([email], map: "idx_users_email")
  @@index([phone_number], map: "idx_users_phone_number")
}

model pending_registrations {
  id                        Int       @id @default(autoincrement())
  phone_number              String    @unique @db.VarChar(15)
  password_hash             String    @db.VarChar(255)
  full_name                 String    @db.VarChar(255)
  email                     String?   @db.VarChar(255)
  role                      String?   @default("USER") @db.VarChar(200)
  phone_verification_otp    String    @db.VarChar(10)
  phone_verification_expiry DateTime  @db.Timestamp(6)
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
}

model contacts {
  id           Int            @id @default(autoincrement())
  group_id     Int
  name         String         @db.VarChar(255)
  phone_number String         @db.VarChar(20)
  call_history call_history[]
  groups       groups         @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model groups {
  id          Int        @id @default(autoincrement())
  user_id     Int
  group_name  String     @db.VarChar(255)
  description String?
  group_type  String?    @default("USER_DEFINED") @db.VarChar(20)
  contacts    contacts[]
}

model call_history {
  id              Int       @id @default(autoincrement())
  user_id         Int
  group_id        Int
  called_at       DateTime? @default(now()) @db.Timestamp(6)
  contact_id      Int?
  contact_phone   String?   @db.VarChar(20)
  status          String?   @db.VarChar(32)
  call_sid        String?   @db.VarChar(64)
  attempt         Int?      @default(1)
  message_content String?
  contacts        contacts? @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_contact")
}
