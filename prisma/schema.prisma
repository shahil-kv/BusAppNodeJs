generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bus_owners {
  bus_owner_id              Int       @id @default(autoincrement())
  full_name                 String    @db.VarChar(255)
  phone_number              String    @unique @db.VarChar(50)
  password_hash             String
  company_name              String?   @db.VarChar(255)
  is_email_verified         Boolean   @default(false)
  email_verification_token  String?
  email_verification_expiry DateTime? @db.Timestamptz(6)
  created_at                DateTime  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime  @default(now()) @db.Timestamptz(6)
  buses                     buses[]

  @@index([password_hash], map: "idx_bus_owners_password_hash")
  @@index([phone_number], map: "idx_bus_owners_phone_number")
}

model bus_routes {
  route_id       Int       @id @default(autoincrement())
  bus_id         Int
  sequence_order Int       @default(0)
  from_location  String    @db.VarChar(255)
  to_location    String    @db.VarChar(255)
  location_name  String?   @db.VarChar(255)
  start_time     DateTime? @db.Time(6)
  end_time       DateTime? @db.Time(6)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  buses          buses     @relation(fields: [bus_id], references: [bus_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bus")

  @@unique([bus_id, sequence_order], map: "uq_bus_sequence")
  @@index([bus_id], map: "idx_bus_routes_bus_id")
}

model buses {
  bus_id              Int          @id @default(autoincrement())
  bus_owner_id        Int
  registration_number String       @unique @db.VarChar(100)
  model               String?      @db.VarChar(100)
  capacity            Int?
  created_at          DateTime     @default(now()) @db.Timestamptz(6)
  updated_at          DateTime     @default(now()) @db.Timestamptz(6)
  bus_routes          bus_routes[]
  bus_owners          bus_owners   @relation(fields: [bus_owner_id], references: [bus_owner_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bus_owner")
  drivers             drivers[]

  @@index([bus_owner_id], map: "idx_buses_bus_owner_id")
  @@index([registration_number], map: "idx_buses_registration_number")
}

model drivers {
  driver_id           Int              @id @default(autoincrement())
  full_name           String           @db.VarChar(255)
  phone_number        String           @unique @db.VarChar(15)
  password_hash       String
  license_number      String           @unique @db.VarChar(50)
  license_expiry_date DateTime         @db.Date
  current_bus_id      Int?
  is_active           Boolean?         @default(true)
  created_at          DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?        @default(now()) @db.Timestamptz(6)
  buses               buses?           @relation(fields: [current_bus_id], references: [bus_id], onDelete: NoAction, onUpdate: NoAction)
  refresh_tokens      refresh_tokens[]

  @@index([current_bus_id], map: "idx_drivers_current_bus_id")
  @@index([license_number], map: "idx_drivers_license_number")
  @@index([phone_number], map: "idx_drivers_phone_number")
}

model refresh_tokens {
  id         Int       @id @default(autoincrement())
  driver_id  Int
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  drivers    drivers   @relation(fields: [driver_id], references: [driver_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([driver_id], map: "idx_refresh_tokens_driver_id")
}
